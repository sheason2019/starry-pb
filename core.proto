syntax = "proto3";
package starry;

option go_package = "./;prototypes";

// Core 四大能力
// 1. PubMeta 维护
// 2. Connect
// 3. Message 下发
// 4. TODO: Federation 消息广播

message PubMeta {
  string pub_key_pem = 1;
  string username = 2;
  string avatar_url = 3;
  string created_at = 5;

  // 私钥字符串，仅在导出Metadata时使用
  string priv_key_pem = 1001;
}

// 通用身份鉴权结构体
message IdentifySignatureCompose {
  PubMeta pub_meta = 1;
  bytes pub_meta_sig = 2;
  bytes verify_token_sig = 3;
}

// 通用Connect传输内容
message ConnectMessage {
  string type = 1;
  bytes payload = 2;
}

// 包裹消息的盒子，用来帮助服务端判断消息的收发者
message MessageBox {
  string conversation_type = 1; // 可能是群聊、普通用户、订阅账号等
  string conversation_key = 2;
  bytes sender_key = 3;
  bytes receiver_key = 4;
  bytes data = 5;
  bytes data_sig = 6;
}

// 消息的实际内容
message MessageData {
  string conversation_type = 1;
  string conversation_key = 2;
  bytes sender_key = 3; // sender pub key hash
  bytes receiver_key = 4; // receiver pubkey hash
  string message_type = 5; // text image video
  bytes content = 6;
  string created_at = 7;
}

// 消息状态更新
message MessageUpdateBox {
  MessageUpdateData data = 1; // 更新数据
  bytes data_sig = 2;
  bytes sender_key = 3;
  bytes receiver_key = 4;
}

message MessageUpdateData {
  string action = 1; // receive or checked
  bytes box_data_sig = 2; // box.data_sig
  string created_at = 3;
}

// Source 的基本信息
message Information {
  string name = 1;
}

message MessageBrokerLicence {
  string created_at = 1;
  string expire_at = 2;
  string host = 3;
}

//
// RPC 接口 DTO 定义
//
message GetInformationReq { }
message GetInformationResp {
  Information info = 1;
}

message GetPubMetaReq { }
message GetPubMetaResp {
  repeated IdentifySignatureCompose iscs = 1;
}

message PostPubMetaReq {
  IdentifySignatureCompose isc = 1;
}
message PostPubMetaResp {
  IdentifySignatureCompose latest_isc = 1; // 更新的用户数据
}

message GetPubMetaByHashReq {
  bytes hashed = 1;
}
message GetPubMetaByHashResp {
  IdentifySignatureCompose isc = 1;
  bool exist = 2;
}

message PostMessageReq {
  MessageBox box = 1;
}
message PostMessageResp { }

message UpdateMessageReq {
  MessageUpdateBox mub = 1;
}
message UpdateMessageResp {}

service StarrySource {
  rpc GetInformation(GetInformationReq) returns (GetInformationResp);
  rpc Connect(stream ConnectMessage) returns (stream ConnectMessage);
  rpc GetPubMeta(GetPubMetaReq) returns (GetPubMetaResp);
  rpc GetPubMetaByHash(GetPubMetaByHashReq) returns (GetPubMetaByHashResp);
  rpc PostPubMeta(PostPubMetaReq) returns (PostPubMetaResp);
  rpc PostMessage(PostMessageReq) returns (PostMessageResp);
  rpc UpdateMessage(UpdateMessageReq) returns (UpdateMessageResp);
}

service StarryFederation {}
